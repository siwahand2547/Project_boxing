<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
  body {
    font-family: 'Segoe UI', sans-serif;
    background-color: #111;
    color: #fff;
    margin: 0;
    padding: 20px;
  }

  h1, h2 {
    color: #fff;
    border-left: 5px solid #007bff;
    padding-left: 10px;
  }

  table.fighter-info, table.realtime-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    background-color: #1a1a1a;
    box-shadow: 0 2px 6px rgba(0,0,0,0.5);
    border-radius: 8px;
    overflow: hidden;
  }

  table.fighter-info th, table.realtime-table th {
    background-color: #333;
    color: #fff;
    padding: 10px;
    text-align: center;
    font-weight: bold;
  }

  table.fighter-info td, table.realtime-table td {
    padding: 10px;
    text-align: center;
    border-top: 1px solid #444;
  }

  .fighter-info {
    width: 45%;
    float: left;
    margin-right: 5%;
  }

  .fighter-info:last-child {
    margin-right: 0;
  }

  img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 6px;
  box-shadow: 0 0 5px #fff;
}


  .realtime-container {
    width: 45%;
    float: left;
    margin-right: 5%;
    background-color: #181818;
    border: 2px solid #007bff;
    border-radius: 10px;
    padding: 15px;
    box-sizing: border-box;
    min-height: 250px;
    max-height: 300px;
    overflow-y: auto;
  }

  .realtime-container:last-child {
    margin-right: 0;
    border-color: #6c757d;
  }

  .realtime-container h2 {
    color: #fff;
    margin-top: 0;
  }

  .clear {
    clear: both;
    margin-top: 30px;
  }

  .watch-btn {
    background-color: #007bff;
    color: #fff;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .watch-btn:hover {
    background-color: #0056b3;
  }

  button {
    font-size: 14px;
    margin: 5px;
    border: none;
    background-color: #444;
    color: #fff;
    padding: 8px 14px;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;
  }

  button:hover {
    background-color: #666;
  }

  #replayVideo {
    margin-top: 20px;
    border: 2px solid #fff;
    border-radius: 6px;
    display: none;
  }

  #timestamps button {
    margin: 5px;
    background: #555;
    color: #fff;
  }

  #clipModal, #videoModal {
    display: none;
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(0,0,0,0.85);
    z-index: 1000;
    justify-content: center;
    align-items: center;
  }

  #clipModal video, #modalVideo {
    border-radius: 8px;
    max-width: 100%;
    max-height: 90vh;
  }

  .modal-close {
    position: absolute;
    top: 10px;
    right: 15px;
    color: white;
    font-size: 24px;
    cursor: pointer;
  }

  #fightRoundsContainer table {
    margin-top: 20px;
    background: #1b1b1b;
    color: #fff;
    width: 100%;
    border-collapse: collapse;
  }

  #fightRoundsContainer th, #fightRoundsContainer td {
    border: 1px solid #444;
    padding: 10px;
    text-align: center;
  }

  #fightRoundsContainer th {
    background-color: #333;
  }

  #clipModal {
  display: none;
  position: fixed;
  top:0; left:0; width:100%; height:100%;
  background: rgba(0,0,0,0.9);
  z-index: 1000;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

#clipModal > div {
  display: flex;
  gap: 15px;
  justify-content: center;
  align-items: center;
}

#clipModal video {
  border-radius: 8px;
  max-height: 80vh;
  background: black;
  box-shadow: 0 0 15px rgba(0,0,0,0.7);
}
  .status-text {
    margin-top: 8px;
    font-weight: bold;
    color: green;
  }

  .status-text.disconnected {
    color: gray;
  }
</style>

</head>

<body>
  <div id="clipModal" style="display:none; ...">
  <span onclick="closeClipModal()" ...>&times;</span>
  <div style="display:flex; gap:10px; justify-content:center;">
    <video id="clipVideo1" muted preload="auto" controls></video>
    <video id="clipVideo2" muted preload="auto" controls></video>

  </div>
</div>

<%- include('partials/navbar') %>
<h1>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</h1>
<!-- Modal ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ -->
<div id="videoModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.8); z-index:1000; justify-content:center; align-items:center;">
  <div style="position:relative; background:#000; padding:20px; border-radius:8px;">
    <span onclick="closeModal()" style="position:absolute; top:10px; right:15px; color:white; font-size:24px; cursor:pointer;">&times;</span>
    <video id="modalVideo" width="800" controls autoplay></video>
    <div id="modalTimestamps" style="margin-top:10px; text-align:center;"></div>

  </div>
</div>


<table class="fighter-info">
  <thead>
    <tr><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏Ñ‡πà‡∏≤‡∏¢</th><th>‡∏£‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</th><th>‡∏†‡∏≤‡∏û</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><%= fighter1.name %></td>
      <td><%= fighter1.camp %></td>
      <td><%= fighter1.weight_class %></td>
      <td>
        <img src="<%= fighter1.photo %>" alt="fighter1" width="150">
        <div style="margin-top: 10px;">
          <input type="text" id="comInput1" placeholder="‡∏£‡∏∞‡∏ö‡∏∏ COM ‡πÄ‡∏ä‡πà‡∏ô COM4">
          <button onclick="connectSensor(1)">‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</button>
          <button onclick="disconnectSensor(1)">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</button>
          <div id="status1" class="status-text"></div>
        </div>
      </td>
    </tr>
  </tbody>
</table>

<table class="fighter-info">
  <thead>
    <tr><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏Ñ‡πà‡∏≤‡∏¢</th><th>‡∏£‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</th><th>‡∏†‡∏≤‡∏û</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><%= fighter2.name %></td>
      <td><%= fighter2.camp %></td>
      <td><%= fighter2.weight_class %></td>
      <td>
        <img src="<%= fighter2.photo %>" alt="fighter2" width="150">
        <div style="margin-top: 10px;">
          <input type="text" id="comInput2" placeholder="‡∏£‡∏∞‡∏ö‡∏∏ COM ‡πÄ‡∏ä‡πà‡∏ô COM5">
          <button onclick="connectSensor(2)">‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</button>
          <button onclick="disconnectSensor(2)">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</button>
          <div id="status2" class="status-text"></div>
        </div>
      </td>
    </tr>
  </tbody>
</table>




<div class="clear"></div>

<div class="realtime-container" id="realtime1">
  <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Real-time ‡∏ô‡∏±‡∏Å‡∏ä‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1 (COM4)</h2>
  <table class="realtime-table" id="com4Table">
    <thead><tr><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</th></tr></thead>

    <tbody></tbody>
  </table>
</div>

<div class="realtime-container" id="realtime2">
  <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Real-time ‡∏ô‡∏±‡∏Å‡∏ä‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2 (COM5)</h2>
  <table class="realtime-table" id="com5Table">
    <thead><tr><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</th></tr></thead>

    <tbody></tbody>
  </table>
</div>

<div class="clear"></div>

<!-- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å -->
<button onclick="startRecording()">üé• ‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>
<button onclick="stopRecording()" id="stopBtn" disabled>‚õî ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>
<button id="btnSummary">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>

<div id="summaryModal" style="display:none; position: fixed; top:0; left:0; width:100%; height:100%; 
  background: rgba(0,0,0,0.5); justify-content: center; align-items: center;">

  <div style="background:#000000; padding:20px; border-radius:8px; max-width:400px; width:90%; max-height:80vh; display: flex; flex-direction: column;">
    
    <h2 style="margin-top:0;">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</h2>

    <!-- ‡πÉ‡∏™‡πà max-height + scroll -->
    <div id="summaryContent" style="flex: 1 1 auto; overflow-y: auto; max-height: 60vh; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px;">
      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
    </div>

    <button id="closeModal" style="align-self: flex-end;">‡∏õ‡∏¥‡∏î</button>
  </div>
</div>

<!-- test -->
<h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á</h2>
<div id="fightRoundsContainer"></div>

 <% Object.keys(fightDataGrouped).forEach(round => { %>
  <h2>‡∏¢‡∏Å‡∏ó‡∏µ‡πà <%= round %></h2>
  <table class="realtime-table">
    <thead>
      <tr>
        <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô</th>
        <th>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</th>
        <th>‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</th>
        <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
        <th>‡∏Ñ‡∏•‡∏¥‡∏õ‡∏Å‡∏•‡πâ‡∏≠‡∏á</th>
      </tr>
    </thead>
    <tbody>
    <% fightDataGrouped[round].forEach(item => { 
     const fighterName = fighterIdNameMap[item.fighterid] || item.fighterid;
%>
  <tr>
    <td><%= item.timehit %></td>
    <td><%= item.time %></td>
    <td><%= fighterName %></td>
    <td><%= item.fighterdetail %></td>
    <td>
      <% if (item.clipdetail && item.clipdetail2) { %>
  <button class="watch-btn" onclick="openClipModal('<%= item.clipdetail %>', '<%= item.clipdetail2 %>', '<%= item.timehit %>')">‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ 2 ‡∏°‡∏∏‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô</button>
<% } else if (item.clipdetail) { %>
  <button class="watch-btn" onclick="openClipModal('<%= item.clipdetail %>', '', '<%= item.timehit %>')">‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ 1</button>
<% } else if (item.clipdetail2) { %>
  <button class="watch-btn" onclick="openClipModal('', '<%= item.clipdetail2 %>', '<%= item.timehit %>')">‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ 2</button>
<% } else { %>
  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏•‡∏¥‡∏õ
<% } %>
    </td>
  </tr>
<% }) %>

    </tbody>
  </table>
<% }) %>


<!--<video id="replayVideo" width="600" controls></video> -->
<video id="cam1" autoplay playsinline width="320" height="240" style="background:#000;"></video>
<video id="cam2" autoplay playsinline width="320" height="240" style="background:#000;"></video>


<ul id="timestamps"></ul>

<script>
  const socket = io();
  let mediaRecorder1, mediaRecorder2;
  let recordedChunks1 = [], recordedChunks2 = [];
  let recordedVideoUrl = null;
  let timestampList = [];
  let realtimeData = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  let startTime = null;

  //‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const btnSummary = document.getElementById('btnSummary');
const modal = document.getElementById('summaryModal');
const summaryContent = document.getElementById('summaryContent');
const closeModal = document.getElementById('closeModal');

btnSummary.addEventListener('click', () => {
  summaryContent.innerHTML = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...';

  fetch('/match/summary', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ schedulefightId: <%= schedulefightId %> })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      let html = '';
      const f = data.fighters;

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏ä‡∏ô‡∏∞
      let winCount = {};
      Object.keys(f).forEach(fid => winCount[fid] = 0);

      data.summaryByRound.forEach(r => {
        const round = r.round;
        const score1 = r.scores[Object.keys(f)[0]];
        const score2 = r.scores[Object.keys(f)[1]];
        const winnerId = r.winnerId;
        const winnerName = winnerId ? f[winnerId] : '‡πÄ‡∏™‡∏°‡∏≠';

        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞
        if (winnerId) {
          winCount[winnerId]++;
        }

        html += `<h3>‡∏¢‡∏Å‡∏ó‡∏µ‡πà ${round}</h3>`;
        html += `<p>${f[Object.keys(f)[0]]}: ${score1} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>`;
        html += `<p>${f[Object.keys(f)[1]]}: ${score2} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>`;
        html += `<p><strong>‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏¢‡∏Å‡∏ô‡∏µ‡πâ: ${winnerName}</strong></p>`;
        html += `<hr>`;
      });

      // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏£‡∏ß‡∏°
      const fids = Object.keys(f);
      const win1 = winCount[fids[0]];
      const win2 = winCount[fids[1]];
      let finalWinnerText = '';

      if (win1 > win2) {
        finalWinnerText = `üèÜ <strong>‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏£‡∏ß‡∏°: ${f[fids[0]]}</strong>`;
      } else if (win2 > win1) {
        finalWinnerText = `üèÜ <strong>‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏£‡∏ß‡∏°: ${f[fids[1]]}</strong>`;
      } else {
        finalWinnerText = `ü§ù <strong>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠</strong>`;
      }

      html += `<div style="margin-top:10px; font-size: 1.2em;">${finalWinnerText}</div>`;
      summaryContent.innerHTML = html;

    } else {
      summaryContent.innerHTML = `<p style="color:red;">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${data.message}</p>`;
    }
  })
  .catch(err => {
    summaryContent.innerHTML = `<p style="color:red;">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}</p>`;
  });

  modal.style.display = 'flex';
});

closeModal.addEventListener('click', () => {
  modal.style.display = 'none';
});
  //‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  
let roundNumber = <%= typeof roundNumberStart !== 'undefined' ? roundNumberStart : 1 %>;

  let roundsData = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime + fightDuration ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏¢‡∏Å


function startRecording() {
  startTime = Date.now();
  recordedChunks1 = [];
  recordedChunks2 = [];
  timestampList = [];
  realtimeData = [];

  navigator.mediaDevices.enumerateDevices()
    .then(devices => {
      const videoInputs = devices.filter(device => device.kind === 'videoinput');
      if (videoInputs.length < 2) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á 2 ‡∏ï‡∏±‡∏ß');

      return Promise.all([
        navigator.mediaDevices.getUserMedia({
          video: { deviceId: videoInputs[0].deviceId },
          audio: true
        }),
        navigator.mediaDevices.getUserMedia({
          video: { deviceId: videoInputs[1].deviceId },
          audio: true
        })
      ]);
    })
    .then(([stream1, stream2]) => {
      const cam1 = document.getElementById('cam1');
      const cam2 = document.getElementById('cam2');
      cam1.srcObject = stream1;
      cam2.srcObject = stream2;
      cam1.play();
      cam2.play();

      mediaRecorder1 = new MediaRecorder(stream1);
      mediaRecorder2 = new MediaRecorder(stream2);

      mediaRecorder1.ondataavailable = e => {
        if (e.data.size > 0) recordedChunks1.push(e.data);
      };
      mediaRecorder2.ondataavailable = e => {
        if (e.data.size > 0) recordedChunks2.push(e.data);
      };

      mediaRecorder1.start();
      mediaRecorder2.start();

      document.getElementById('stopBtn').disabled = false;
      alert('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß!');
    })
    .catch(err => {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ' + err.message);
    });
}


  // ‡∏ü‡∏±‡∏á socket event ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  // ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ß‡∏•‡∏≤ get ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime ‡∏à‡∏≤‡∏Å socket ‡∏Å‡πá‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô
socket.on('com4Data', (data) => {
  const currentTimeSec = Math.floor((Date.now() - startTime) / 1000);
  addRealtimeData('‡∏ô‡∏±‡∏Å‡∏ä‡∏Å1', data, currentTimeSec);
  addTableRow('com4Table', data);
});

  socket.on('com5Data', (data) => {
  const currentTimeSec = Math.floor((Date.now() - startTime) / 1000);
  addRealtimeData('‡∏ô‡∏±‡∏Å‡∏ä‡∏Å2', data, currentTimeSec);
  addTableRow('com5Table', data);
});

 // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏ä‡∏Å‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á)
function addRealtimeData(label, value, timeHitSec = 0) {
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö data ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏ä‡∏Å (timeHitSec)
  realtimeData.push({ label, value: value + '|' + timeHitSec });
}

  function addTableRow(tableId, data) {
    const tbody = document.querySelector(`#${tableId} tbody`);
    const tr = document.createElement('tr');
    const elapsedMs = Date.now() - startTime;
const elapsedSec = Math.floor(elapsedMs / 1000);
const min = Math.floor(elapsedSec / 60);
const sec = elapsedSec % 60;
const elapsedStr = `${min}:${sec.toString().padStart(2, '0')}`;

tr.innerHTML = `
  <td>${elapsedStr}</td>
  <td>${data}</td>
`;

    tbody.appendChild(tr);
    tbody.parentElement.scrollTop = tbody.parentElement.scrollHeight;
    addTimestamp(`${tableId === 'com4Table' ? '‡∏ô‡∏±‡∏Å‡∏ä‡∏Å1' : '‡∏ô‡∏±‡∏Å‡∏ä‡∏Å2'}: ${data}`);
  }

async function stopRecording() {
  if (mediaRecorder1 && mediaRecorder1.state !== 'inactive' && mediaRecorder2 && mediaRecorder2.state !== 'inactive') {
    // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠ event onstop ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà
    let stoppedCount = 0;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Promise ‡∏£‡∏≠ mediaRecorder1.onstop
    const stopPromise1 = new Promise(resolve => {
      mediaRecorder1.onstop = () => {
        const blob1 = new Blob(recordedChunks1, { type: 'video/webm' });
        resolve(blob1);
      };
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Promise ‡∏£‡∏≠ mediaRecorder2.onstop
    const stopPromise2 = new Promise(resolve => {
      mediaRecorder2.onstop = () => {
        const blob2 = new Blob(recordedChunks2, { type: 'video/webm' });
        resolve(blob2);
      };
    });

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ï‡∏±‡∏ß
    mediaRecorder1.stop();
    mediaRecorder2.stop();

    try {
      // ‡∏£‡∏≠‡∏£‡∏±‡∏ö Blob ‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
      const [blob1, blob2] = await Promise.all([stopPromise1, stopPromise2]);

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
      const formData1 = new FormData();
      formData1.append('video', blob1, 'fight_cam1.webm');

      const formData2 = new FormData();
      formData2.append('video', blob2, 'fight_cam2.webm');

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á 1
      const uploadRes1 = await fetch('/upload-video', {
        method: 'POST',
        body: formData1
      });
      const uploadData1 = await uploadRes1.json();
      if (!uploadData1.success) throw new Error(uploadData1.message || 'Upload cam1 failed');

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á 2
      const uploadRes2 = await fetch('/upload-video', {
        method: 'POST',
        body: formData2
      });
      const uploadData2 = await uploadRes2.json();
      if (!uploadData2.success) throw new Error(uploadData2.message || 'Upload cam2 failed');

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
      const endTime = Date.now();
      const durationMs = endTime - startTime;
      const totalSeconds = Math.floor(durationMs / 1000);
      const minutes = Math.floor(totalSeconds / 60);
      const seconds = totalSeconds % 60;
      const fightDuration = `${minutes}:${seconds.toString().padStart(2, '0')}`;

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏° URL ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ 2 ‡∏ï‡∏±‡∏ß
      const saveRes = await fetch('/datafight/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          schedulefight_id: "<%= schedulefightId %>",
          clip_url: uploadData1.url,    // URL ‡∏Å‡∏•‡πâ‡∏≠‡∏á 1
          clip_url2: uploadData2.url,   // URL ‡∏Å‡∏•‡πâ‡∏≠‡∏á 2
          time: fightDuration,
          data: realtimeData.map(d => ({ label: d.label, value: d.value })),
          round: roundNumber
        })
      });

      const saveData = await saveRes.json();
      if (!saveData.success) throw new Error('Save to DB failed');

      roundNumber++;
      roundsData.push({
        round: roundNumber,
        fightDuration,
        videoUrl: uploadData1.url,   // ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á 1 ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
        videoUrl2: uploadData2.url,
        data: [...realtimeData]
      });

      renderFightRounds();
      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      document.getElementById('stopBtn').disabled = true;

    } catch (error) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
    }
  } else {
    alert('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
  }
}


  function openClipModal(url1, url2, timehit) {
  const modal = document.getElementById('clipModal');
  const video1 = document.getElementById('clipVideo1');
  const video2 = document.getElementById('clipVideo2');

  modal.style.display = 'flex';

  // ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞ reset video ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á
  video1.pause();
  video2.pause();

  video1.removeAttribute('src');
  video2.removeAttribute('src');

  video1.load();
  video2.load();

  // set src ‡πÉ‡∏´‡∏°‡πà
  video1.src = url1;
  video2.src = url2;

  let seconds = hhmmssToSeconds(timehit);
  seconds = Math.max(0, seconds - 2);

  // ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠ video ‡∏û‡∏£‡πâ‡∏≠‡∏°
  function waitForVideoReady(video, seconds) {
    return new Promise(resolve => {
      video.onloadedmetadata = () => {
        // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ö‡∏≤‡∏á browser ‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏° seek ‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ setTimeout
        setTimeout(() => {
          video.currentTime = seconds;
        }, 50);

        video.onseeked = () => {
          resolve();
        };
      };
    });
  }

  Promise.all([
    waitForVideoReady(video1, seconds),
    waitForVideoReady(video2, seconds)
  ]).then(() => {
    video1.play();
    video2.play();
  });
}





function closeClipModal() {
  const modal = document.getElementById('clipModal');
  const video1 = document.getElementById('clipVideo1');
  const video2 = document.getElementById('clipVideo2');

  video1.pause();
  video2.pause();

  video1.removeAttribute('src');
  video2.removeAttribute('src');

  video1.load();
  video2.load();

  modal.style.display = 'none';
}

   function hhmmssToSeconds(hhmmss) {
    const parts = hhmmss.split(':').map(Number);
    if (parts.length === 3) {
      const [h, m, s] = parts;
      return h * 3600 + m * 60 + s;
    }
    return 0;
  }
  function formatSeconds(sec) {
  const h = Math.floor(sec / 3600);
  const m = Math.floor((sec % 3600) / 60);
  const s = Math.floor(sec % 60);
  return [h, m, s].map(n => String(n).padStart(2, '0')).join(':');
}

  document.querySelectorAll('.openClipBtn').forEach(btn => {
  btn.addEventListener('click', () => {
    const url = btn.dataset.url;
    const timehit = btn.dataset.timehit;
    openClipModal(url, timehit);
  });
});

  const video = document.getElementById('videoPlayer');
  document.querySelectorAll('.markerBtn').forEach(btn => {
    btn.addEventListener('click', () => {
      const time = hhmmssToSeconds(btn.dataset.timehit);
      video.currentTime = time;
      video.play();
    });
  });

  function renderFightRounds() {
  const container = document.getElementById('fightRoundsContainer');
  container.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô

  roundsData.forEach(round => {
    const table = document.createElement('table');
    table.style = 'width:100%; color:#eee; background:#222; margin-top:20px;';
    table.border = 1;

    const thead = document.createElement('thead');
    thead.innerHTML = `
      <tr>
        <th colspan="4" style="text-align:left;">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ‡∏¢‡∏Å‡∏ó‡∏µ‡πà ${round.round-1}</th>
      </tr>
      <tr>
        <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô</th>
        <th>‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</th>
        <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
        <th>‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</th>
      </tr>
    `;

    const tbody = document.createElement('tbody');

    round.data.forEach(item => {
      const [value, timehit] = item.value.split('|');
      const fighterLabel = item.label;
      const timeDisplay = timehit ? formatSeconds(timehit) : '-';


      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${timeDisplay}</td>
        <td>${fighterLabel}</td>
        <td>${value}</td>
        <td><button class="watch-btn" onclick="openClipModal('${round.videoUrl}', '${timeDisplay}')">‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ</button></td>
      `;
      tbody.appendChild(tr);
    });

    table.appendChild(thead);
    table.appendChild(tbody);
    container.appendChild(table);
  });
}


  function connectSensor(fighter) {
    const com = document.getElementById(`comInput${fighter}`).value;
    if (!com) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ COM ‡∏û‡∏≠‡∏£‡πå‡∏ï ‡πÄ‡∏ä‡πà‡∏ô COM4');
      return;
    }

    socket.emit('connectSensor', { fighter, com });
  }

  function disconnectSensor(fighter) {
    socket.emit('disconnectSensor', { fighter });
  }

  socket.on('sensorStatus', ({ fighter, com, connected }) => {
    const status = document.getElementById(`status${fighter}`);
    if (connected) {
      status.innerText = `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${com}`;
      status.classList.remove('disconnected');
    } else {
      status.innerText = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
      status.classList.add('disconnected');
    }
  });

  function disconnectSensor(fighter) {
    socket.emit('disconnectSensor', { fighter });
    document.getElementById(`status${fighter}`).innerText = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
    document.getElementById(`status${fighter}`).classList.add('disconnected');
  }

  // ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  socket.on('sensorStatus', ({ fighter, com, connected }) => {
    const status = document.getElementById(`status${fighter}`);
    if (connected) {
      status.innerText = `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${com}`;
      status.classList.remove('disconnected');
    } else {
      status.innerText = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
      status.classList.add('disconnected');
    }
  });

  
</script>


</body>
</html>