<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
  body {
    font-family: 'Segoe UI', sans-serif;
    background-color: #111;
    color: #fff;
    margin: 0;
    padding: 20px;
  }

  h1, h2 {
    color: #fff;
    border-left: 5px solid #007bff;
    padding-left: 10px;
  }

  table.fighter-info, table.realtime-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    background-color: #1a1a1a;
    box-shadow: 0 2px 6px rgba(0,0,0,0.5);
    border-radius: 8px;
    overflow: hidden;
  }

  table.fighter-info th, table.realtime-table th {
    background-color: #333;
    color: #fff;
    padding: 10px;
    text-align: center;
    font-weight: bold;
  }

  table.fighter-info td, table.realtime-table td {
    padding: 10px;
    text-align: center;
    border-top: 1px solid #444;
  }

  .fighter-info {
    width: 45%;
    float: left;
    margin-right: 5%;
  }

  .fighter-info:last-child {
    margin-right: 0;
  }

  img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 6px;
  box-shadow: 0 0 5px #fff;
}


  .realtime-container {
    width: 45%;
    float: left;
    margin-right: 5%;
    background-color: #181818;
    border: 2px solid #007bff;
    border-radius: 10px;
    padding: 15px;
    box-sizing: border-box;
    min-height: 250px;
    max-height: 300px;
    overflow-y: auto;
  }

  .realtime-container:last-child {
    margin-right: 0;
    border-color: #6c757d;
  }

  .realtime-container h2 {
    color: #fff;
    margin-top: 0;
  }

  .clear {
    clear: both;
    margin-top: 30px;
  }

  .watch-btn {
    background-color: #007bff;
    color: #fff;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .watch-btn:hover {
    background-color: #0056b3;
  }

  button {
    font-size: 14px;
    margin: 5px;
    border: none;
    background-color: #444;
    color: #fff;
    padding: 8px 14px;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;
  }

  button:hover {
    background-color: #666;
  }

  #replayVideo {
    margin-top: 20px;
    border: 2px solid #fff;
    border-radius: 6px;
    display: none;
  }

  #timestamps button {
    margin: 5px;
    background: #555;
    color: #fff;
  }

  #clipModal, #videoModal {
    display: none;
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(0,0,0,0.85);
    z-index: 1000;
    justify-content: center;
    align-items: center;
  }

  #clipModal video, #modalVideo {
    border-radius: 8px;
    max-width: 100%;
    max-height: 90vh;
  }

  .modal-close {
    position: absolute;
    top: 10px;
    right: 15px;
    color: white;
    font-size: 24px;
    cursor: pointer;
  }

  #fightRoundsContainer table {
    margin-top: 20px;
    background: #1b1b1b;
    color: #fff;
    width: 100%;
    border-collapse: collapse;
  }

  #fightRoundsContainer th, #fightRoundsContainer td {
    border: 1px solid #444;
    padding: 10px;
    text-align: center;
  }

  #fightRoundsContainer th {
    background-color: #333;
  }
</style>

</head>

<body>
<div id="clipModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:#000000cc; justify-content:center; align-items:center;">
  <div style="background:white; padding:20px; display:flex; flex-direction:column;">
    <video id="replayVideo1" width="480" controls></video>
    <video id="replayVideo2" width="480" controls></video>
    <button onclick="document.getElementById('clipModal').style.display='none'">‡∏õ‡∏¥‡∏î</button>
  </div>
</div>



  </div>
</div>

<%- include('partials/navbar') %>
<h1>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</h1>
<!-- Modal ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ -->
<div id="videoModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.8); z-index:1000; justify-content:center; align-items:center;">
  <div style="position:relative; background:#000; padding:20px; border-radius:8px;">
    <span onclick="closeModal()" style="position:absolute; top:10px; right:15px; color:white; font-size:24px; cursor:pointer;">&times;</span>
    <video id="modalVideo" width="800" controls autoplay></video>
    <div id="modalTimestamps" style="margin-top:10px; text-align:center;"></div>

  </div>
</div>


<table class="fighter-info">
  <thead>
    <tr><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏Ñ‡πà‡∏≤‡∏¢</th><th>‡∏£‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</th><th>‡∏†‡∏≤‡∏û</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><%= fighter1.name %></td>
      <td><%= fighter1.camp %></td>
      <td><%= fighter1.weight_class %></td>
      <td><img src="<%= fighter1.photo %>" alt="fighter1"></td>
    </tr>
  </tbody>
</table>

<table class="fighter-info">
  <thead>
    <tr><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏Ñ‡πà‡∏≤‡∏¢</th><th>‡∏£‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</th><th>‡∏†‡∏≤‡∏û</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><%= fighter2.name %></td>
      <td><%= fighter2.camp %></td>
      <td><%= fighter2.weight_class %></td>
      <td><img src="<%= fighter2.photo %>" alt="fighter2"></td>
    </tr>
  </tbody>
</table>

<div class="clear"></div>

<div class="realtime-container" id="realtime1">
  <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Real-time ‡∏ô‡∏±‡∏Å‡∏ä‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1 (COM4)</h2>
  <table class="realtime-table" id="com4Table">
    <thead><tr><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</th></tr></thead>

    <tbody></tbody>
  </table>
</div>

<div class="realtime-container" id="realtime2">
  <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Real-time ‡∏ô‡∏±‡∏Å‡∏ä‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2 (COM5)</h2>
  <table class="realtime-table" id="com5Table">
    <thead><tr><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</th></tr></thead>

    <tbody></tbody>
  </table>
</div>

<div class="clear"></div>

<!-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á -->
<select id="cameraSelect" multiple></select>

<!-- ‡πÅ‡∏™‡∏î‡∏á preview ‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á -->
<div id="videoContainer" style="display: flex; gap: 10px;"></div>

<!-- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å -->
<button onclick="startRecording()">üé• ‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>
<button onclick="stopRecording()" id="stopBtn" disabled>‚õî ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>
<button id="btnSummary">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>

<div id="summaryModal" style="display:none; position: fixed; top:0; left:0; width:100%; height:100%; 
  background: rgba(0,0,0,0.5); justify-content: center; align-items: center;">

  <div style="background:#000000; padding:20px; border-radius:8px; max-width:400px; width:90%; max-height:80vh; display: flex; flex-direction: column;">
    
    <h2 style="margin-top:0;">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</h2>

    <!-- ‡πÉ‡∏™‡πà max-height + scroll -->
    <div id="summaryContent" style="flex: 1 1 auto; overflow-y: auto; max-height: 60vh; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px;">
      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
    </div>

    <button id="closeModal" style="align-self: flex-end;">‡∏õ‡∏¥‡∏î</button>
  </div>
</div>

<!-- test -->
<h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á</h2>
<div id="fightRoundsContainer"></div>

 <% Object.keys(fightDataGrouped).forEach(round => { %>
  <h2>‡∏¢‡∏Å‡∏ó‡∏µ‡πà <%= round %></h2>
  <table class="realtime-table">
    <thead>
      <tr>
        <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô</th>
        <th>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</th>
        <th>‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</th>
        <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
        <th>‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</th>
      </tr>
    </thead>
    <tbody>
    <% fightDataGrouped[round].forEach(item => { 
         const fighterName = fighterIdNameMap[item.fighterid] || item.fighterid;
    %>
      <tr>
        <td><%= item.timehit %></td>
        <td><%= item.time %></td>
        <td><%= fighterName %></td>
        <td><%= item.fighterdetail %></td>
<td>
  <button onclick="openClipModalURLs('<%= row.clipdetail %>', '<%= row.clipdetail2 %>', '<%= row.timehit %>')">
    ‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ
  </button>
</td>

      </tr>
    <% }) %>
    </tbody>
  </table>
<% }) %>


<!--<video id="replayVideo" width="600" controls></video> -->
<video id="replayVideo" width="600" style="display:none;"></video>

<ul id="timestamps"></ul>

<script>
  const socket = io();
 // let mediaRecorder;
  //let recordedChunks = [];
  //let recordedVideoUrl = null;
  let timestampList = [];
 // let realtimeData = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 // let startTime = null;

  //‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
//  let mediaRecorders = [];
let streams = [];
//let recordedBlobsList = [];
//let videoStreams = [];

//let mediaRecorder1, mediaRecorder2;
//let recordedChunks1 = [], recordedChunks2 = [];
//let recordedVideoUrl1, recordedVideoUrl2;
///////////////////new/////////////////////////////////////////////
let mediaRecorders = [];
let recordedChunksArray = [];
let videoStreams = [];

let mediaRecorder1, mediaRecorder2;
let recordedChunks1 = [], recordedChunks2 = [];
let recordedVideoUrl1, recordedVideoUrl2;

let startTime = null;
let realtimeData = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
let roundNumber = <%= typeof roundNumberStart !== 'undefined' ? roundNumberStart : 1 %>;
let roundsData = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏¢‡∏Å
///////////////////new/////////////////////////////////////////////


  //‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const btnSummary = document.getElementById('btnSummary');
const modal = document.getElementById('summaryModal');
const summaryContent = document.getElementById('summaryContent');
const closeModal = document.getElementById('closeModal');

btnSummary.addEventListener('click', () => {
  summaryContent.innerHTML = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...';

  fetch('/match/summary', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ schedulefightId: <%= schedulefightId %> })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      let html = '';
      const f = data.fighters;

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏ä‡∏ô‡∏∞
      let winCount = {};
      Object.keys(f).forEach(fid => winCount[fid] = 0);

      data.summaryByRound.forEach(r => {
        const round = r.round;
        const score1 = r.scores[Object.keys(f)[0]];
        const score2 = r.scores[Object.keys(f)[1]];
        const winnerId = r.winnerId;
        const winnerName = winnerId ? f[winnerId] : '‡πÄ‡∏™‡∏°‡∏≠';

        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞
        if (winnerId) {
          winCount[winnerId]++;
        }

        html += `<h3>‡∏¢‡∏Å‡∏ó‡∏µ‡πà ${round}</h3>`;
        html += `<p>${f[Object.keys(f)[0]]}: ${score1} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>`;
        html += `<p>${f[Object.keys(f)[1]]}: ${score2} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>`;
        html += `<p><strong>‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏¢‡∏Å‡∏ô‡∏µ‡πâ: ${winnerName}</strong></p>`;
        html += `<hr>`;
      });

      // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏£‡∏ß‡∏°
      const fids = Object.keys(f);
      const win1 = winCount[fids[0]];
      const win2 = winCount[fids[1]];
      let finalWinnerText = '';

      if (win1 > win2) {
        finalWinnerText = `üèÜ <strong>‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏£‡∏ß‡∏°: ${f[fids[0]]}</strong>`;
      } else if (win2 > win1) {
        finalWinnerText = `üèÜ <strong>‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏£‡∏ß‡∏°: ${f[fids[1]]}</strong>`;
      } else {
        finalWinnerText = `ü§ù <strong>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠</strong>`;
      }

      html += `<div style="margin-top:10px; font-size: 1.2em;">${finalWinnerText}</div>`;
      summaryContent.innerHTML = html;

    } else {
      summaryContent.innerHTML = `<p style="color:red;">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${data.message}</p>`;
    }
  })
  .catch(err => {
    summaryContent.innerHTML = `<p style="color:red;">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}</p>`;
  });

  modal.style.display = 'flex';
});

closeModal.addEventListener('click', () => {
  modal.style.display = 'none';
});
  //‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  
//let roundNumber = <%= typeof roundNumberStart !== 'undefined' ? roundNumberStart : 1 %>;

  //let roundsData = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime + fightDuration ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏¢‡∏Å


 // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á 2 ‡∏ï‡∏±‡∏ß
async function startRecording() {
  startTime = Date.now();
  realtimeData = [];
  mediaRecorders = [];
  recordedChunksArray = [];
  videoStreams = [];

  try {
    const devices = await navigator.mediaDevices.enumerateDevices();
    const videoDevices = devices.filter(device => device.kind === 'videoinput');

    const selectedDevices = videoDevices.slice(0, 2); // ‡∏Å‡∏•‡πâ‡∏≠‡∏á 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å

    if (selectedDevices.length === 0) {
      alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠');
      return;
    }

    for (let i = 0; i < selectedDevices.length; i++) {
      const device = selectedDevices[i];
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { deviceId: device.deviceId },
        audio: true
      });

      videoStreams.push(stream);
      recordedChunksArray[i] = [];

      const videoPreview = document.getElementById(`replayVideo${i + 1}`);
      videoPreview.srcObject = stream;
      videoPreview.style.display = 'block';
      videoPreview.muted = true;
      videoPreview.play();

      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorder.ondataavailable = e => {
        if (e.data && e.data.size > 0) {
          recordedChunksArray[i].push(e.data);
        }
      };
      mediaRecorder.start();

      mediaRecorders.push(mediaRecorder);
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ mediaRecorder1, mediaRecorder2, recordedChunks1, recordedChunks2 ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    mediaRecorder1 = mediaRecorders[0];
    mediaRecorder2 = mediaRecorders[1];
    recordedChunks1 = recordedChunksArray[0];
    recordedChunks2 = recordedChunksArray[1];

    document.getElementById('stopBtn').disabled = false;
    alert('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß!');
  } catch (err) {
    alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ' + err.message);
  }
}

// ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ 2 ‡∏ï‡∏±‡∏ß
async function stopRecording() {
  if (
    mediaRecorder1 && mediaRecorder1.state !== 'inactive' &&
    mediaRecorder2 && mediaRecorder2.state !== 'inactive'
  ) {

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Promise ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ MediaRecorder
    let stop1 = new Promise(resolve => {
      mediaRecorder1.onstop = () => resolve(new Blob(recordedChunks1, { type: 'video/webm' }));
    });
    let stop2 = new Promise(resolve => {
      mediaRecorder2.onstop = () => resolve(new Blob(recordedChunks2, { type: 'video/webm' }));
    });

    mediaRecorder1.stop();
    mediaRecorder2.stop();
    document.getElementById('stopBtn').disabled = true;

    try {
      const [blob1, blob2] = await Promise.all([stop1, stop2]);

      // ‡πÅ‡∏™‡∏î‡∏á preview ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
      const preview1 = document.getElementById('replayVideo1');
      const preview2 = document.getElementById('replayVideo2');

      recordedVideoUrl1 = URL.createObjectURL(blob1);
      recordedVideoUrl2 = URL.createObjectURL(blob2);

      preview1.srcObject = null;
      preview1.src = recordedVideoUrl1;
      preview1.controls = true;
      preview1.muted = false;

      preview2.srcObject = null;
      preview2.src = recordedVideoUrl2;
      preview2.controls = true;
      preview2.muted = false;

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á
      const formData1 = new FormData();
      formData1.append('video', blob1, 'camera1.webm');

      const formData2 = new FormData();
      formData2.append('video', blob2, 'camera2.webm');

      const [uploadRes1, uploadRes2] = await Promise.all([
        fetch('/upload-video', { method: 'POST', body: formData1 }),
        fetch('/upload-video', { method: 'POST', body: formData2 })
      ]);

      const uploadData1 = await uploadRes1.json();
      const uploadData2 = await uploadRes2.json();

      if (!uploadData1.success || !uploadData2.success) {
        throw new Error('‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
      const endTime = Date.now();
      const durationMs = endTime - startTime;
      const totalSeconds = Math.floor(durationMs / 1000);
      const minutes = Math.floor(totalSeconds / 60);
      const seconds = totalSeconds % 60;
      const fightDuration = `${minutes}:${seconds.toString().padStart(2, '0')}`;

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (clip_url ‡πÅ‡∏•‡∏∞ clip_url2)
      const saveRes = await fetch('/datafight/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          schedulefight_id: "<%= schedulefightId %>",
          clip_url: uploadData1.url,
          clip_url2: uploadData2.url,
          time: fightDuration,
          data: realtimeData.map(d => ({ label: d.label, value: d.value })),
          round: roundNumber
        })
      });

      roundNumber++;
      roundsData.push({
        round: roundNumber,
        fightDuration,
        videoUrls: {
          cam1: uploadData1.url,
          cam2: uploadData2.url
        },
        data: [...realtimeData]
      });

      renderFightRounds();

      const saveData = await saveRes.json();
      if (!saveData.success) throw new Error('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');

      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á 2 ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
    } catch (err) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + err.message);
    }
  }
}


  ///////////////////////////////////////////////‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ////////////////////////////////////////////////
  async function getCameras() {
  const devices = await navigator.mediaDevices.enumerateDevices();
  const cameras = devices.filter(device => device.kind === 'videoinput');
  const select = document.getElementById('cameraSelect');
  cameras.forEach((camera, i) => {
    const option = document.createElement('option');
    option.value = camera.deviceId;
    option.textContent = camera.label || `‡∏Å‡∏•‡πâ‡∏≠‡∏á ${i+1}`;
    select.appendChild(option);
  });
}
  ///////////////////////////////////////////////‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ////////////////////////////////////////////////

  // ‡∏ü‡∏±‡∏á socket event ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  // ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ß‡∏•‡∏≤ get ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime ‡∏à‡∏≤‡∏Å socket ‡∏Å‡πá‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô
socket.on('com4Data', (data) => {
  const currentTimeSec = Math.floor((Date.now() - startTime) / 1000);
  addRealtimeData('‡∏ô‡∏±‡∏Å‡∏ä‡∏Å1', data, currentTimeSec);
  addTableRow('com4Table', data);
});

  socket.on('com5Data', (data) => {
  const currentTimeSec = Math.floor((Date.now() - startTime) / 1000);
  addRealtimeData('‡∏ô‡∏±‡∏Å‡∏ä‡∏Å2', data, currentTimeSec);
  addTableRow('com5Table', data);
});



function addTableRow(tableId, data) {
  const tbody = document.querySelector(`#${tableId} tbody`);
  const tr = document.createElement('tr');
  const elapsedMs = Date.now() - startTime;
  const elapsedSec = Math.floor(elapsedMs / 1000);
  const min = Math.floor(elapsedSec / 60);
  const sec = elapsedSec % 60;
  const elapsedStr = `${min}:${sec.toString().padStart(2, '0')}`;

  tr.innerHTML = `
    <td>${elapsedStr}</td>
    <td>${data}</td>
  `;

  tbody.appendChild(tr);
  tbody.parentElement.scrollTop = tbody.parentElement.scrollHeight;
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addTimestamp ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
}
function openClipModalURLs(cam1Url, cam2Url, timehit) {
  openClipModal({ cam1: cam1Url, cam2: cam2Url }, timehit);
}

function openClipModal(url, timehit) {
  const modal = document.getElementById('clipModal');
  const video1 = document.getElementById('replayVideo1');
  const video2 = document.getElementById('replayVideo2');

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á 1 ‡πÅ‡∏•‡∏∞ 2
  video1.src = url.cam1 || '';
  video2.src = url.cam2 || '';

  modal.style.display = 'flex';

  // ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
  [video1, video2].forEach(video => {
    video.pause();
    video.currentTime = 0;
  });

  if (timehit) {
    const seconds = hhmmssToSeconds(timehit);
    const seekTime = Math.max(0, seconds - 2);
    video1.currentTime = seekTime;
    video2.currentTime = seekTime;
  }

  video1.play();
  video2.play();
}

function closeClipModal() {
  const modal = document.getElementById('clipModal');
  const video1 = document.getElementById('replayVideo1');
  const video2 = document.getElementById('replayVideo2');

  video1.pause();
  video2.pause();
  video1.src = '';
  video2.src = '';
  modal.style.display = 'none';
}

// ‡πÅ‡∏õ‡∏•‡∏á hh:mm:ss ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
function hhmmssToSeconds(hhmmss) {
  const parts = hhmmss.split(':').map(Number);
  if (parts.length === 3) {
    const [h, m, s] = parts;
    return h * 3600 + m * 60 + s;
  }
  return 0;
}
function formatSeconds(sec) {
  const h = Math.floor(sec / 3600);
  const m = Math.floor((sec % 3600) / 60);
  const s = Math.floor(sec % 60);
  return [h, m, s].map(n => String(n).padStart(2, '0')).join(':');
}
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á)
function addRealtimeData(label, value, timeHitSec = 0) {
  realtimeData.push({ label, value: value + '|' + timeHitSec });
}
  document.querySelectorAll('.openClipBtn').forEach(btn => {
  btn.addEventListener('click', () => {
    const url = btn.dataset.url;
    const timehit = btn.dataset.timehit;
    openClipModal(url, timehit);
  });
});

  const video = document.getElementById('videoPlayer');
  document.querySelectorAll('.markerBtn').forEach(btn => {
    btn.addEventListener('click', () => {
      const time = hhmmssToSeconds(btn.dataset.timehit);
      video.currentTime = time;
      video.play();
    });
  });

 // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á ‡πÜ
function renderFightRounds() {
  const container = document.getElementById('fightRoundsContainer');
  container.innerHTML = '';

  roundsData.forEach(round => {
    const table = document.createElement('table');
    table.style = 'width:100%; color:#eee; background:#222; margin-top:20px;';
    table.border = 1;

    const thead = document.createElement('thead');
    thead.innerHTML = `
      <tr>
        <th colspan="4" style="text-align:left;">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ‡∏¢‡∏Å‡∏ó‡∏µ‡πà ${round.round - 1}</th>
      </tr>
      <tr>
        <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô</th>
        <th>‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</th>
        <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
        <th>‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</th>
      </tr>
    `;

    const tbody = document.createElement('tbody');

    round.data.forEach(item => {
      const [value, timehit] = item.value.split('|');
      const fighterLabel = item.label;
      const timeDisplay = timehit ? formatSeconds(timehit) : '-';

      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${timeDisplay}</td>
        <td>${fighterLabel}</td>
        <td>${value}</td>
        <td><button class="watch-btn" onclick="openClipModal({ cam1: '${round.videoUrls.cam1}', cam2: '${round.videoUrls.cam2}' }, '${timeDisplay}')">‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ</button></td>
      `;
      tbody.appendChild(tr);
    });

    table.appendChild(thead);
    table.appendChild(tbody);
    container.appendChild(table);
  });
}

  
</script>


</body>
</html>