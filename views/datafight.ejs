<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #121212;
      color: #eee;
      padding: 20px;
    }
    table.fighter-info {
      border-collapse: collapse;
      width: 45%;
      margin-bottom: 20px;
      float: left;
      margin-right: 5%;
      background-color: #1e1e1e;
      border: 2px solid #555;
      border-radius: 6px;
    }
    table.fighter-info:last-child {
      margin-right: 0;
    }
    th, td {
      border: 1px solid #555;
      padding: 8px;
      text-align: center;
    }
    th {
      background-color: #333;
    }
    img {
      max-width: 100px;
      border-radius: 4px;
    }
    .realtime-container {
      width: 45%;
      float: left;
      margin-right: 5%;
      background-color: #222;
      border: 2px solid #0f0;
      border-radius: 8px;
      padding: 15px;
      box-sizing: border-box;
      min-height: 250px;
      overflow-y: auto;
      max-height: 300px;
    }
    .realtime-container:last-child {
      margin-right: 0;
      border-color: #08f;
    }
    .realtime-container h2 {
      margin-top: 0;
      margin-bottom: 10px;
      font-weight: bold;
      color: #0f0;
    }
    .realtime-container:last-child h2 {
      color: #08f;
    }
    table.realtime-table {
      width: 100%;
      border-collapse: collapse;
      background-color: #111;
    }
    table.realtime-table th, table.realtime-table td {
      border: 1px solid #444;
      padding: 6px;
      text-align: center;
      color: #afa;
      font-family: monospace;
    }
    table.realtime-table th {
      background-color: #222;
    }
    .watch-btn {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 4px;
      cursor: pointer;
    }
    .clear { clear: both; margin-top: 20px; }
    #replayVideo { margin-top: 20px; display: none; border: 2px solid #fff; }
    #timestamps button { margin: 5px 5px; background: #444; color: #fff; border: none; padding: 5px 10px; border-radius: 4px; }
  </style>
</head>

<body>
  <div id="clipModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; 
    background-color: rgba(0,0,0,0.8); z-index:1000; justify-content:center; align-items:center;">
  <div style="position:relative; background:#000; padding:20px; border-radius:8px; max-width: 90%; max-height: 90%;">
    <span onclick="closeClipModal()" style="position:absolute; top:10px; right:15px; color:white; font-size:24px; cursor:pointer;">&times;</span>
    <video id="clipVideo" width="800" controls autoplay style="max-width: 100%; max-height: 80vh;"></video>
  </div>
</div>

<h1>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</h1>

<!-- Modal ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ -->
<div id="videoModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.8); z-index:1000; justify-content:center; align-items:center;">
  <div style="position:relative; background:#000; padding:20px; border-radius:8px;">
    <span onclick="closeModal()" style="position:absolute; top:10px; right:15px; color:white; font-size:24px; cursor:pointer;">&times;</span>
    <video id="modalVideo" width="800" controls autoplay></video>
    <div id="modalTimestamps" style="margin-top:10px; text-align:center;"></div>

  </div>
</div>


<table class="fighter-info">
  <thead>
    <tr><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏Ñ‡πà‡∏≤‡∏¢</th><th>‡∏£‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</th><th>‡∏†‡∏≤‡∏û</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><%= fighter1.name %></td>
      <td><%= fighter1.camp %></td>
      <td><%= fighter1.weight_class %></td>
      <td><img src="<%= fighter1.photo %>" alt="fighter1"></td>
    </tr>
  </tbody>
</table>

<table class="fighter-info">
  <thead>
    <tr><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏Ñ‡πà‡∏≤‡∏¢</th><th>‡∏£‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</th><th>‡∏†‡∏≤‡∏û</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><%= fighter2.name %></td>
      <td><%= fighter2.camp %></td>
      <td><%= fighter2.weight_class %></td>
      <td><img src="<%= fighter2.photo %>" alt="fighter2"></td>
    </tr>
  </tbody>
</table>

<div class="clear"></div>

<div class="realtime-container" id="realtime1">
  <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Real-time ‡∏ô‡∏±‡∏Å‡∏ä‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1 (COM4)</h2>
  <table class="realtime-table" id="com4Table">
    <thead><tr><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</th></tr></thead>

    <tbody></tbody>
  </table>
</div>

<div class="realtime-container" id="realtime2">
  <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Real-time ‡∏ô‡∏±‡∏Å‡∏ä‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2 (COM5)</h2>
  <table class="realtime-table" id="com5Table">
    <thead><tr><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</th></tr></thead>

    <tbody></tbody>
  </table>
</div>

<div class="clear"></div>

<!-- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å -->
<button onclick="startRecording()">üé• ‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>
<button onclick="stopRecording()" id="stopBtn" disabled>‚õî ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>

<!-- test -->
<h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á</h2>
<table border="1" style="width: 100%; color: #eee; background: #222; margin-top: 20px;">
  <thead>
    <tr>
      <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô</th>
      <th>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</th> <!-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ -->
      <th>‡∏ô‡∏±‡∏Å‡∏ä‡∏Å (ID)</th>
      <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</th>
      <th>‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</th>
    </tr>
  </thead>
  <tbody>
  <% fightData.forEach(item => { 
       // ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
       const dateObj = new Date(item.timestamp);
       const formattedDate = dateObj.toLocaleString('th-TH', {
         year: 'numeric', month: '2-digit', day: '2-digit',
         hour: '2-digit', minute: '2-digit', second: '2-digit'
       });

       // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô (item.fightDuration ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
       const fightDuration = item.fightDuration || '-';

       const fighterName = fighterIdNameMap[item.fighterid] || item.fighterid;
  %>
    <tr>
      <td><%= item.timehit %></td>       <!-- ‚úÖ ‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏ä‡∏Å -->
      <td><%= item.time %></td>  <!-- ‡πÅ‡∏™‡∏î‡∏á mm:ss -->  <!-- ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô -->
      <td><%= fighterName %></td>
      <td><%= item.fighterdetail %></td>
      <td>
      <% if (item.clipdetail) { %>
        <button class="watch-btn openClipBtn" data-url="<%= item.clipdetail %>"  data-timehit="<%= item.timehit %>">‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ </button>
      <% } else { %>
        ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏•‡∏¥‡∏õ
      <% } %>
    </td>
    </tr>
  <% }) %>
  </tbody>
</table>




<!-- test -->
<!--<video id="replayVideo" width="600" controls></video> -->
<video id="replayVideo" width="600" style="display:none;"></video>

<ul id="timestamps"></ul>

<script>
  const socket = io();
  let mediaRecorder;
  let recordedChunks = [];
  let recordedVideoUrl = null;
  let timestampList = [];
  let realtimeData = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  let startTime = null;


  function startRecording() {
    startTime = Date.now(); // ‚è±Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    recordedChunks = [];
    timestampList = [];
    realtimeData = []; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤

    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then((stream) => {
        document.getElementById('stopBtn').disabled = false;
        const videoPreview = document.getElementById('replayVideo');
        videoPreview.srcObject = stream;
        videoPreview.style.display = 'block';
        videoPreview.muted = true;
        videoPreview.play();

        mediaRecorder = new MediaRecorder(stream);
        mediaRecorder.ondataavailable = e => recordedChunks.push(e.data);

        // ‡∏•‡∏ö onstop ‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
        // mediaRecorder.onstop = () => { ... };

        mediaRecorder.start();
        alert('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡πâ‡∏ß!');
      })
      .catch(err => alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ' + err.message));
  }

  // ‡∏ü‡∏±‡∏á socket event ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  // ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ß‡∏•‡∏≤ get ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime ‡∏à‡∏≤‡∏Å socket ‡∏Å‡πá‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô
socket.on('com4Data', (data) => {
  const currentTimeSec = Math.floor((Date.now() - startTime) / 1000);
  addRealtimeData('‡∏ô‡∏±‡∏Å‡∏ä‡∏Å1', data, currentTimeSec);
  addTableRow('com4Table', data);
});

  socket.on('com5Data', (data) => {
  const currentTimeSec = Math.floor((Date.now() - startTime) / 1000);
  addRealtimeData('‡∏ô‡∏±‡∏Å‡∏ä‡∏Å2', data, currentTimeSec);
  addTableRow('com5Table', data);
});

 // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏ä‡∏Å‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á)
function addRealtimeData(label, value, timeHitSec = 0) {
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö data ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏ä‡∏Å (timeHitSec)
  realtimeData.push({ label, value: value + '|' + timeHitSec });
}

  function addTableRow(tableId, data) {
    const tbody = document.querySelector(`#${tableId} tbody`);
    const tr = document.createElement('tr');
    const elapsedMs = Date.now() - startTime;
const elapsedSec = Math.floor(elapsedMs / 1000);
const min = Math.floor(elapsedSec / 60);
const sec = elapsedSec % 60;
const elapsedStr = `${min}:${sec.toString().padStart(2, '0')}`;

tr.innerHTML = `
  <td>${elapsedStr}</td>
  <td>${data}</td>
`;

    tbody.appendChild(tr);
    tbody.parentElement.scrollTop = tbody.parentElement.scrollHeight;
    addTimestamp(`${tableId === 'com4Table' ? '‡∏ô‡∏±‡∏Å‡∏ä‡∏Å1' : '‡∏ô‡∏±‡∏Å‡∏ä‡∏Å2'}: ${data}`);
  }

 function stopRecording() {
  if (mediaRecorder && mediaRecorder.state !== 'inactive') {
    mediaRecorder.onstop = async () => {
      const blob = new Blob(recordedChunks, { type: 'video/webm' });
      recordedVideoUrl = URL.createObjectURL(blob);

      const videoPreview = document.getElementById('replayVideo');
      videoPreview.srcObject = null;
      videoPreview.src = recordedVideoUrl;
      videoPreview.controls = true;
      videoPreview.muted = false;
      videoPreview.style.display = 'block';

      const formData = new FormData();
      formData.append('video', blob, 'fight.webm');

      try {
        const uploadRes = await fetch('/upload-video', {
          method: 'POST',
          body: formData
        });
        const uploadData = await uploadRes.json();
        if (!uploadData.success) throw new Error(uploadData.message || 'Upload failed');

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        const endTime = Date.now();
        const durationMs = endTime - startTime;
        const totalSeconds = Math.floor(durationMs / 1000);
        const minutes = Math.floor(totalSeconds / 60);
        const seconds = totalSeconds % 60;
        const fightDuration = `${minutes}:${seconds.toString().padStart(2, '0')}`;

        // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤
        const saveRes = await fetch('/datafight/save', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            schedulefight_id: "<%= schedulefightId %>",
            clip_url: uploadData.url,
            time: fightDuration, // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            data: realtimeData.map(d => ({ label: d.label, value: d.value }))
          })
        });
        const saveData = await saveRes.json();
        if (!saveData.success) throw new Error('Save to DB failed');

        alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      } catch (error) {
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
      }
    };
    mediaRecorder.stop();
    document.getElementById('stopBtn').disabled = true;
  }
}

  function openClipModal(url, timehit) {
  const modal = document.getElementById('clipModal');
  const video = document.getElementById('clipVideo');
  video.src = url;
  modal.style.display = 'flex';

  video.onloadedmetadata = () => {
  let seconds = hhmmssToSeconds(timehit);
  seconds = Math.max(0, seconds - 2); // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö 2 ‡∏ß‡∏¥ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 0
  video.currentTime = seconds;
  video.play();
};
}

  function closeClipModal() {
    const modal = document.getElementById('clipModal');
    const video = document.getElementById('clipVideo');
    video.pause();
    video.currentTime = 0;
    video.src = '';
    modal.style.display = 'none';
  }

   function hhmmssToSeconds(hhmmss) {
    const parts = hhmmss.split(':').map(Number);
    if (parts.length === 3) {
      const [h, m, s] = parts;
      return h * 3600 + m * 60 + s;
    }
    return 0;
  }
  document.querySelectorAll('.openClipBtn').forEach(btn => {
  btn.addEventListener('click', () => {
    const url = btn.dataset.url;
    const timehit = btn.dataset.timehit;
    openClipModal(url, timehit);
  });
});

  const video = document.getElementById('videoPlayer');
  document.querySelectorAll('.markerBtn').forEach(btn => {
    btn.addEventListener('click', () => {
      const time = hhmmssToSeconds(btn.dataset.timehit);
      video.currentTime = time;
      video.play();
    });
  });
  
</script>


</body>
</html>