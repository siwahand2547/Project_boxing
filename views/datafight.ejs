<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #121212;
      color: #eee;
      padding: 20px;
    }
    table.fighter-info {
      border-collapse: collapse;
      width: 45%;
      margin-bottom: 20px;
      float: left;
      margin-right: 5%;
      background-color: #1e1e1e;
      border: 2px solid #555;
      border-radius: 6px;
    }
    table.fighter-info:last-child {
      margin-right: 0;
    }
    th, td {
      border: 1px solid #555;
      padding: 8px;
      text-align: center;
    }
    th {
      background-color: #333;
    }
    img {
      max-width: 100px;
      border-radius: 4px;
    }
    .realtime-container {
      width: 45%;
      float: left;
      margin-right: 5%;
      background-color: #222;
      border: 2px solid #0f0;
      border-radius: 8px;
      padding: 15px;
      box-sizing: border-box;
      min-height: 250px;
      overflow-y: auto;
      max-height: 300px;
    }
    .realtime-container:last-child {
      margin-right: 0;
      border-color: #08f;
    }
    .realtime-container h2 {
      margin-top: 0;
      margin-bottom: 10px;
      font-weight: bold;
      color: #0f0;
    }
    .realtime-container:last-child h2 {
      color: #08f;
    }
    table.realtime-table {
      width: 100%;
      border-collapse: collapse;
      background-color: #111;
    }
    table.realtime-table th, table.realtime-table td {
      border: 1px solid #444;
      padding: 6px;
      text-align: center;
      color: #afa;
      font-family: monospace;
    }
    table.realtime-table th {
      background-color: #222;
    }
    .watch-btn {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 4px;
      cursor: pointer;
    }
    .clear { clear: both; margin-top: 20px; }
    #replayVideo { margin-top: 20px; display: none; border: 2px solid #fff; }
    #timestamps button { margin: 5px 5px; background: #444; color: #fff; border: none; padding: 5px 10px; border-radius: 4px; }
  </style>
</head>
<body>

<h1>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</h1>

<!-- Modal ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ -->
<div id="videoModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.8); z-index:1000; justify-content:center; align-items:center;">
  <div style="position:relative; background:#000; padding:20px; border-radius:8px;">
    <span onclick="closeModal()" style="position:absolute; top:10px; right:15px; color:white; font-size:24px; cursor:pointer;">&times;</span>
    <video id="modalVideo" width="800" controls autoplay></video>
    <div id="modalTimestamps" style="margin-top:10px; text-align:center;"></div>

  </div>
</div>


<table class="fighter-info">
  <thead>
    <tr><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏Ñ‡πà‡∏≤‡∏¢</th><th>‡∏£‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</th><th>‡∏†‡∏≤‡∏û</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><%= fighter1.name %></td>
      <td><%= fighter1.camp %></td>
      <td><%= fighter1.weight_class %></td>
      <td><img src="<%= fighter1.photo %>" alt="fighter1"></td>
    </tr>
  </tbody>
</table>

<table class="fighter-info">
  <thead>
    <tr><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏Ñ‡πà‡∏≤‡∏¢</th><th>‡∏£‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</th><th>‡∏†‡∏≤‡∏û</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><%= fighter2.name %></td>
      <td><%= fighter2.camp %></td>
      <td><%= fighter2.weight_class %></td>
      <td><img src="<%= fighter2.photo %>" alt="fighter2"></td>
    </tr>
  </tbody>
</table>

<div class="clear"></div>

<div class="realtime-container" id="realtime1">
  <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Real-time ‡∏ô‡∏±‡∏Å‡∏ä‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1 (COM4)</h2>
  <table class="realtime-table" id="com4Table">
    <thead><tr><th>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</th><th>‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á</th></tr></thead>
    <tbody></tbody>
  </table>
</div>

<div class="realtime-container" id="realtime2">
  <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Real-time ‡∏ô‡∏±‡∏Å‡∏ä‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2 (COM5)</h2>
  <table class="realtime-table" id="com5Table">
    <thead><tr><th>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</th><th>‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á</th></tr></thead>
    <tbody></tbody>
  </table>
</div>

<div class="clear"></div>

<!-- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å -->
<button onclick="startRecording()">üé• ‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>
<button onclick="stopRecording()" id="stopBtn" disabled>‚õî ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>

<!--<video id="replayVideo" width="600" controls></video> -->
<video id="replayVideo" width="600" style="display:none;"></video>

<ul id="timestamps"></ul>

<script>
  const socket = io();
  let mediaRecorder;
  let recordedChunks = [];
  let recordedVideoUrl = null;
  let timestampList = [];

  function startRecording() {
    recordedChunks = [];
    timestampList = [];

    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then((stream) => {
        document.getElementById('stopBtn').disabled = false;
        const videoPreview = document.getElementById('replayVideo');
        videoPreview.srcObject = stream;
        videoPreview.style.display = 'block';
        videoPreview.muted = true;
        videoPreview.play();

        mediaRecorder = new MediaRecorder(stream);
        mediaRecorder.ondataavailable = e => recordedChunks.push(e.data);

        mediaRecorder.onstop = () => {
          const blob = new Blob(recordedChunks, { type: 'video/webm' });
          recordedVideoUrl = URL.createObjectURL(blob);
          videoPreview.srcObject = null;
          videoPreview.src = recordedVideoUrl;
          videoPreview.controls = true;
          videoPreview.muted = false;
        };

        mediaRecorder.start();
        alert('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡πâ‡∏ß!');
      })
      .catch(err => alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ' + err.message));
  }

  function stopRecording() {
    if (mediaRecorder && mediaRecorder.state !== 'inactive') {
      mediaRecorder.stop();
      document.getElementById('stopBtn').disabled = true;
      alert('‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡πâ‡∏ß!');
    }
  }

    function openModal() {
    if (recordedVideoUrl) {
      const modal = document.getElementById('videoModal');
      const video = document.getElementById('modalVideo');
      video.src = recordedVideoUrl;
      modal.style.display = 'flex';
    } else {
      alert('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π');
    }
  }

  function closeModal() {
    const modal = document.getElementById('videoModal');
    const video = document.getElementById('modalVideo');
    video.pause();
    video.currentTime = 0;
    modal.style.display = 'none';
  }

function addTimestamp(label) {
  const video = document.getElementById('replayVideo');
  const time = video.currentTime;
  timestampList.push({ label, time });

  // ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ï‡πâ replayVideo (‡πÄ‡∏Å‡πà‡∏≤)
  const li = document.createElement('li');
  li.innerHTML = `<button onclick="jumpTo(${time})">‚è±Ô∏è ${label}</button>`;
  document.getElementById('timestamps').appendChild(li);

  // ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ï‡πâ modal video (‡πÉ‡∏´‡∏°‡πà)
  const modalBtn = document.createElement('button');
  modalBtn.textContent = `‚è±Ô∏è ${label}`;
  modalBtn.style.margin = '5px';
  modalBtn.style.background = '#08f';
  modalBtn.style.color = 'white';
  modalBtn.style.border = 'none';
  modalBtn.style.padding = '5px 10px';
  modalBtn.style.borderRadius = '4px';
  modalBtn.onclick = () => jumpToModal(time);
  document.getElementById('modalTimestamps').appendChild(modalBtn);
}


function jumpToModal(seconds) {
  const video = document.getElementById('modalVideo');
  video.currentTime = seconds;
  video.play();
}


  socket.on('com4Data', (data) => {
    const tbody = document.querySelector('#com4Table tbody');
    const tr = document.createElement('tr');
    tr.innerHTML = `<td>${data}</td><td><button class='watch-btn' onclick="openModal()">‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á</button></td>`;
    tbody.appendChild(tr);
    tbody.parentElement.scrollTop = tbody.parentElement.scrollHeight;
    addTimestamp(`‡∏ô‡∏±‡∏Å‡∏ä‡∏Å1: ${data}`);
  });

  socket.on('com5Data', (data) => {
    const tbody = document.querySelector('#com5Table tbody');
    const tr = document.createElement('tr');
    tr.innerHTML = `<td>${data}</td><td><button class='watch-btn' onclick="openModal()">‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á</button></td>`;
    tbody.appendChild(tr);
    tbody.parentElement.scrollTop = tbody.parentElement.scrollHeight;
    addTimestamp(`‡∏ô‡∏±‡∏Å‡∏ä‡∏Å2: ${data}`);
  });
</script>

</body>
</html>