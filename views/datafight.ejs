<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
  body {
    font-family: 'Segoe UI', sans-serif;
    background-color: #111;
    color: #fff;
    margin: 0;
    padding: 20px;
  }

  h1, h2 {
    color: #fff;
    border-left: 5px solid #007bff;
    padding-left: 10px;
  }

  table.fighter-info, table.realtime-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    background-color: #1a1a1a;
    box-shadow: 0 2px 6px rgba(0,0,0,0.5);
    border-radius: 8px;
    overflow: hidden;
  }

  table.fighter-info th, table.realtime-table th {
    background-color: #333;
    color: #fff;
    padding: 10px;
    text-align: center;
    font-weight: bold;
  }

  table.fighter-info td, table.realtime-table td {
    padding: 10px;
    text-align: center;
    border-top: 1px solid #444;
  }

  .fighter-info {
    width: 45%;
    float: left;
    margin-right: 5%;
  }

  .fighter-info:last-child {
    margin-right: 0;
  }

  img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 6px;
  box-shadow: 0 0 5px #fff;
}


  .realtime-container {
    width: 45%;
    float: left;
    margin-right: 5%;
    background-color: #181818;
    border: 2px solid #007bff;
    border-radius: 10px;
    padding: 15px;
    box-sizing: border-box;
    min-height: 250px;
    max-height: 300px;
    overflow-y: auto;
  }

  .realtime-container:last-child {
    margin-right: 0;
    border-color: #6c757d;
  }

  .realtime-container h2 {
    color: #fff;
    margin-top: 0;
  }

  .clear {
    clear: both;
    margin-top: 30px;
  }

  .watch-btn {
    background-color: #007bff;
    color: #fff;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .watch-btn:hover {
    background-color: #0056b3;
  }

  button {
    font-size: 14px;
    margin: 5px;
    border: none;
    background-color: #444;
    color: #fff;
    padding: 8px 14px;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;
  }

  button:hover {
    background-color: #666;
  }

  #replayVideo {
    margin-top: 20px;
    border: 2px solid #fff;
    border-radius: 6px;
    display: none;
  }

  #timestamps button {
    margin: 5px;
    background: #555;
    color: #fff;
  }

  #clipModal, #videoModal {
    display: none;
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(0,0,0,0.85);
    z-index: 1000;
    justify-content: center;
    align-items: center;
  }

  #clipModal video, #modalVideo {
    border-radius: 8px;
    max-width: 100%;
    max-height: 90vh;
  }

  .modal-close {
    position: absolute;
    top: 10px;
    right: 15px;
    color: white;
    font-size: 24px;
    cursor: pointer;
  }

  #fightRoundsContainer table {
    margin-top: 20px;
    background: #1b1b1b;
    color: #fff;
    width: 100%;
    border-collapse: collapse;
  }

  #fightRoundsContainer th, #fightRoundsContainer td {
    border: 1px solid #444;
    padding: 10px;
    text-align: center;
  }

  #fightRoundsContainer th {
    background-color: #333;
  }
</style>

</head>

<body>
  <div id="clipModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; 
    background-color: rgba(0,0,0,0.8); z-index:1000; justify-content:center; align-items:center;">
  <div style="position:relative; background:#000; padding:20px; border-radius:8px; max-width: 90%; max-height: 90%;">
    <span onclick="closeClipModal()" style="position:absolute; top:10px; right:15px; color:white; font-size:24px; cursor:pointer;">&times;</span>
    <video id="clipVideo" width="800" controls autoplay style="max-width: 100%; max-height: 80vh;"></video>
  </div>
</div>

<%- include('partials/navbar') %>
<h1>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</h1>
<!-- Modal ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ -->
<div id="videoModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.8); z-index:1000; justify-content:center; align-items:center;">
  <div style="position:relative; background:#000; padding:20px; border-radius:8px;">
    <span onclick="closeModal()" style="position:absolute; top:10px; right:15px; color:white; font-size:24px; cursor:pointer;">&times;</span>
    <video id="modalVideo" width="800" controls autoplay></video>
    <div id="modalTimestamps" style="margin-top:10px; text-align:center;"></div>

  </div>
</div>


<table class="fighter-info">
  <thead>
    <tr><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏Ñ‡πà‡∏≤‡∏¢</th><th>‡∏£‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</th><th>‡∏†‡∏≤‡∏û</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><%= fighter1.name %></td>
      <td><%= fighter1.camp %></td>
      <td><%= fighter1.weight_class %></td>
      <td><img src="<%= fighter1.photo %>" alt="fighter1"></td>
    </tr>
  </tbody>
</table>

<table class="fighter-info">
  <thead>
    <tr><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏Ñ‡πà‡∏≤‡∏¢</th><th>‡∏£‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</th><th>‡∏†‡∏≤‡∏û</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><%= fighter2.name %></td>
      <td><%= fighter2.camp %></td>
      <td><%= fighter2.weight_class %></td>
      <td><img src="<%= fighter2.photo %>" alt="fighter2"></td>
    </tr>
  </tbody>
</table>

<div class="clear"></div>

<div class="realtime-container" id="realtime1">
  <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Real-time ‡∏ô‡∏±‡∏Å‡∏ä‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1 (COM4)</h2>
  <table class="realtime-table" id="com4Table">
    <thead><tr><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</th></tr></thead>

    <tbody></tbody>
  </table>
</div>

<div class="realtime-container" id="realtime2">
  <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Real-time ‡∏ô‡∏±‡∏Å‡∏ä‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2 (COM5)</h2>
  <table class="realtime-table" id="com5Table">
    <thead><tr><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</th></tr></thead>

    <tbody></tbody>
  </table>
</div>

<div class="clear"></div>

<!-- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å -->
<button onclick="startRecording()">üé• ‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>
<button onclick="stopRecording()" id="stopBtn" disabled>‚õî ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>
<button id="summaryBtn">‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</button>


<!-- test -->
<h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á</h2>
<div id="fightRoundsContainer"></div>

 <% Object.keys(fightDataGrouped).forEach(round => { %>
  <h2>‡∏¢‡∏Å‡∏ó‡∏µ‡πà <%= round %></h2>
  <table class="realtime-table">
    <thead>
      <tr>
        <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô</th>
        <th>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</th>
        <th>‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</th>
        <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
        <th>‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</th>
      </tr>
    </thead>
    <tbody>
    <% fightDataGrouped[round].forEach(item => { 
         const fighterName = fighterIdNameMap[item.fighterid] || item.fighterid;
    %>
      <tr>
        <td><%= item.timehit %></td>
        <td><%= item.time %></td>
        <td><%= fighterName %></td>
        <td><%= item.fighterdetail %></td>
        <td>
          <% if (item.clipdetail) { %>
            <button class="watch-btn openClipBtn" data-url="<%= item.clipdetail %>" data-timehit="<%= item.timehit %>">‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ</button>
          <% } else { %>
            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏•‡∏¥‡∏õ
          <% } %>
        </td>
      </tr>
    <% }) %>
    </tbody>
  </table>
<% }) %>




<!--------------------------------------- ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ---------------------------------------------------------------->
<div id="summaryModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:#000000cc; z-index:9999;">
  <div style="background:#fff; color:#000; margin:10% auto; padding:20px; width:90%; max-width:600px; border-radius:10px; position:relative;">
    <h2 style="text-align:center;">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô</h2>
    <table id="summaryTable" style="width:100%; border-collapse:collapse; margin-top:20px;">
      <thead>
        <tr>
          <th>‡∏¢‡∏Å‡∏ó‡∏µ‡πà</th>
          <th>‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞</th>
          <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
        </tr>
      </thead>
      <tbody>
        <!-- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏î‡∏¢ JS -->
      </tbody>
    </table>
    <button onclick="closeSummaryModal()" style="margin-top:20px;">‡∏õ‡∏¥‡∏î</button>
  </div>
</div>

<!--------------------------------------- ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ---------------------------------------------------------------->
<!--<video id="replayVideo" width="600" controls></video> -->
<video id="replayVideo" width="600" style="display:none;"></video>

<ul id="timestamps"></ul>

<script>
  const socket = io();
  let mediaRecorder;
  let recordedChunks = [];
  let recordedVideoUrl = null;
  let timestampList = [];
  let realtimeData = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  let startTime = null;

  //‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const datafight = <%- JSON.stringify(datafight) %>; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏°‡∏≤
  const fighter1 = "<%= fighter1 %>";
  const fighter2 = "<%= fighter2 %>";
    function compareRounds(data) {
    const summary = {};
    data.forEach(entry => {
      const round = entry.round;
      if (!summary[round]) {
        summary[round] = { fighter1: { power: 0, hits: 0 }, fighter2: { power: 0, hits: 0 } };
      }

      const fighterKey = entry.fighter === fighter1 ? 'fighter1' : 'fighter2';
      summary[round][fighterKey].power += entry.power;
      summary[round][fighterKey].hits += 1;
    });

    return Object.entries(summary).map(([round, stats]) => {
      const f1 = stats.fighter1;
      const f2 = stats.fighter2;

      const winner =
        f1.power > f2.power && f1.hits >= f2.hits ? fighter1 :
        f2.power > f1.power && f2.hits >= f1.hits ? fighter2 :
        f1.power === f2.power && f1.hits === f2.hits ? '‡πÄ‡∏™‡∏°‡∏≠' :
        f1.power >= f2.power ? fighter1 : fighter2;

      return {
        round,
        winner,
        detail: `‡πÅ‡∏£‡∏á: ${f1.power} vs ${f2.power}, ‡∏Ñ‡∏£‡∏±‡πâ‡∏á: ${f1.hits} vs ${f2.hits}`
      };
    });
  }

  function openSummaryModal() {
    const result = compareRounds(datafight);
    const tbody = document.querySelector('#summaryTable tbody');
    tbody.innerHTML = '';
    result.forEach(r => {
      const tr = document.createElement('tr');
      tr.innerHTML = `<td>‡∏¢‡∏Å ${r.round}</td><td>${r.winner}</td><td>${r.detail}</td>`;
      tbody.appendChild(tr);
    });

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏ä‡∏ô‡∏∞‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
    const count = { [fighter1]: 0, [fighter2]: 0, '‡πÄ‡∏™‡∏°‡∏≠': 0 };
    result.forEach(r => count[r.winner]++);

    const finalWinner = count[fighter1] > count[fighter2]
      ? fighter1 : count[fighter2] > count[fighter1]
      ? fighter2 : '‡πÄ‡∏™‡∏°‡∏≠‡∏£‡∏ß‡∏°';

    const tr = document.createElement('tr');
    tr.innerHTML = `<td colspan="3"><strong>‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡∏ß‡∏°: ${finalWinner}</strong></td>`;
    tbody.appendChild(tr);

    document.getElementById('summaryModal').style.display = 'block';
  }

  function closeSummaryModal() {
    document.getElementById('summaryModal').style.display = 'none';
  }

  document.getElementById('summaryBtn').addEventListener('click', openSummaryModal);
  //‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  
let roundNumber = <%= typeof roundNumberStart !== 'undefined' ? roundNumberStart : 1 %>;

  let roundsData = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime + fightDuration ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏¢‡∏Å


  function startRecording() {
    startTime = Date.now(); // ‚è±Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
    recordedChunks = [];
    timestampList = [];
    realtimeData = []; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤

    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then((stream) => {
        document.getElementById('stopBtn').disabled = false;
        const videoPreview = document.getElementById('replayVideo');
        videoPreview.srcObject = stream;
        videoPreview.style.display = 'block';
        videoPreview.muted = true;
        videoPreview.play();

        mediaRecorder = new MediaRecorder(stream);
        mediaRecorder.ondataavailable = e => recordedChunks.push(e.data);

        // ‡∏•‡∏ö onstop ‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
        // mediaRecorder.onstop = () => { ... };

        mediaRecorder.start();
        alert('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡πâ‡∏ß!');
      })
      .catch(err => alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ' + err.message));
  }

  // ‡∏ü‡∏±‡∏á socket event ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  // ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ß‡∏•‡∏≤ get ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• realtime ‡∏à‡∏≤‡∏Å socket ‡∏Å‡πá‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô
socket.on('com4Data', (data) => {
  const currentTimeSec = Math.floor((Date.now() - startTime) / 1000);
  addRealtimeData('‡∏ô‡∏±‡∏Å‡∏ä‡∏Å1', data, currentTimeSec);
  addTableRow('com4Table', data);
});

  socket.on('com5Data', (data) => {
  const currentTimeSec = Math.floor((Date.now() - startTime) / 1000);
  addRealtimeData('‡∏ô‡∏±‡∏Å‡∏ä‡∏Å2', data, currentTimeSec);
  addTableRow('com5Table', data);
});

 // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏ä‡∏Å‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á)
function addRealtimeData(label, value, timeHitSec = 0) {
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö data ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏ä‡∏Å (timeHitSec)
  realtimeData.push({ label, value: value + '|' + timeHitSec });
}

  function addTableRow(tableId, data) {
    const tbody = document.querySelector(`#${tableId} tbody`);
    const tr = document.createElement('tr');
    const elapsedMs = Date.now() - startTime;
const elapsedSec = Math.floor(elapsedMs / 1000);
const min = Math.floor(elapsedSec / 60);
const sec = elapsedSec % 60;
const elapsedStr = `${min}:${sec.toString().padStart(2, '0')}`;

tr.innerHTML = `
  <td>${elapsedStr}</td>
  <td>${data}</td>
`;

    tbody.appendChild(tr);
    tbody.parentElement.scrollTop = tbody.parentElement.scrollHeight;
    addTimestamp(`${tableId === 'com4Table' ? '‡∏ô‡∏±‡∏Å‡∏ä‡∏Å1' : '‡∏ô‡∏±‡∏Å‡∏ä‡∏Å2'}: ${data}`);
  }

 function stopRecording() {
  if (mediaRecorder && mediaRecorder.state !== 'inactive') {
    mediaRecorder.onstop = async () => {
      const blob = new Blob(recordedChunks, { type: 'video/webm' });
      recordedVideoUrl = URL.createObjectURL(blob);

      const videoPreview = document.getElementById('replayVideo');
      videoPreview.srcObject = null;
      videoPreview.src = recordedVideoUrl;
      videoPreview.controls = true;
      videoPreview.muted = false;
      videoPreview.style.display = 'block';

      const formData = new FormData();
      formData.append('video', blob, 'fight.webm');

      try {
        const uploadRes = await fetch('/upload-video', {
          method: 'POST',
          body: formData
        });
        const uploadData = await uploadRes.json();
        if (!uploadData.success) throw new Error(uploadData.message || 'Upload failed');

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
        const endTime = Date.now();
        const durationMs = endTime - startTime;
        const totalSeconds = Math.floor(durationMs / 1000);
        const minutes = Math.floor(totalSeconds / 60);
        const seconds = totalSeconds % 60;
        const fightDuration = `${minutes}:${seconds.toString().padStart(2, '0')}`;

        // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤
        const saveRes = await fetch('/datafight/save', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            schedulefight_id: "<%= schedulefightId %>",
            clip_url: uploadData.url,
            time: fightDuration, // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            data: realtimeData.map(d => ({ label: d.label, value: d.value })),
            round: roundNumber
          })
        });
                // üü© ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô roundsData
roundNumber++;  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏Å‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏°‡∏≤
roundsData.push({
  round: roundNumber,
  fightDuration,
  videoUrl: uploadData.url,
  data: [...realtimeData]
});


        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏¢‡∏Å
        renderFightRounds();

        const saveData = await saveRes.json();
        if (!saveData.success) throw new Error('Save to DB failed');

        alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      } catch (error) {
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
      }
    };
    mediaRecorder.stop();
    document.getElementById('stopBtn').disabled = true;
  }
}

  function openClipModal(url, timehit) {
  const modal = document.getElementById('clipModal');
  const video = document.getElementById('clipVideo');
  video.src = url;
  modal.style.display = 'flex';

  video.onloadedmetadata = () => {
  let seconds = hhmmssToSeconds(timehit);
  seconds = Math.max(0, seconds - 2); // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö 2 ‡∏ß‡∏¥ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 0
  video.currentTime = seconds;
  video.play();
};
}

  function closeClipModal() {
    const modal = document.getElementById('clipModal');
    const video = document.getElementById('clipVideo');
    video.pause();
    video.currentTime = 0;
    video.src = '';
    modal.style.display = 'none';
  }

   function hhmmssToSeconds(hhmmss) {
    const parts = hhmmss.split(':').map(Number);
    if (parts.length === 3) {
      const [h, m, s] = parts;
      return h * 3600 + m * 60 + s;
    }
    return 0;
  }
  function formatSeconds(sec) {
  const h = Math.floor(sec / 3600);
  const m = Math.floor((sec % 3600) / 60);
  const s = Math.floor(sec % 60);
  return [h, m, s].map(n => String(n).padStart(2, '0')).join(':');
}

  document.querySelectorAll('.openClipBtn').forEach(btn => {
  btn.addEventListener('click', () => {
    const url = btn.dataset.url;
    const timehit = btn.dataset.timehit;
    openClipModal(url, timehit);
  });
});

  const video = document.getElementById('videoPlayer');
  document.querySelectorAll('.markerBtn').forEach(btn => {
    btn.addEventListener('click', () => {
      const time = hhmmssToSeconds(btn.dataset.timehit);
      video.currentTime = time;
      video.play();
    });
  });

  function renderFightRounds() {
  const container = document.getElementById('fightRoundsContainer');
  container.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô

  roundsData.forEach(round => {
    const table = document.createElement('table');
    table.style = 'width:100%; color:#eee; background:#222; margin-top:20px;';
    table.border = 1;

    const thead = document.createElement('thead');
    thead.innerHTML = `
      <tr>
        <th colspan="4" style="text-align:left;">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ‡∏¢‡∏Å‡∏ó‡∏µ‡πà ${round.round-1}</th>
      </tr>
      <tr>
        <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô</th>
        <th>‡∏ô‡∏±‡∏Å‡∏ä‡∏Å</th>
        <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
        <th>‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</th>
      </tr>
    `;

    const tbody = document.createElement('tbody');

    round.data.forEach(item => {
      const [value, timehit] = item.value.split('|');
      const fighterLabel = item.label;
      const timeDisplay = timehit ? formatSeconds(timehit) : '-';


      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${timeDisplay}</td>
        <td>${fighterLabel}</td>
        <td>${value}</td>
        <td><button class="watch-btn" onclick="openClipModal('${round.videoUrl}', '${timeDisplay}')">‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ</button></td>
      `;
      tbody.appendChild(tr);
    });

    table.appendChild(thead);
    table.appendChild(tbody);
    container.appendChild(table);
  });
}

  
</script>


</body>
</html>